:toc: macro

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

= Deploy an Angular application in AWS

In this guide we will go through the various alternatives for deploying your devon4ng application in AWS. This guide considers a stand-alone (monolothic) app for deployment (no micro-front-ends, but could be part of a mono-repo workspace.) 

For mono-repos, this guide considers deployment of individual devon4ng project within the mono-repo.

A devon4ng app generates static files when you build it.

== S3
* This is the easiest and the cheapest approach for a stand-alone devon4ng application. Simply create a S3 bucket, enable it with static website hosting, allow public access and put in all the static files generated by building your devon4ng application.
* The hosted site will be accessible by an endpoint of the format http://[bucket-name].s3-website-Region.amazonaws.com. This might be a good approach for a staging or a testing environment for your application. Though handling CORS could be tricky.
* You can implement continuous deployment by building your application and copying your generated files to your S3 bucket. There is also a NPM package available at https://www.npmjs.com/package/@jefiozie/ngx-aws-deploy which allows you to deploy your devon4ng app to S3 from your own CLI.

== S3 with CloudFront
* This is similar to the above approach, except you donâ€™t enable static web hosting on your S3 bucket and let public access be restricted.
* Additionally you setup a CloudFront distribution which allows you to use a domain name, a SSL/TSL certificate (if required) and also speeds up performance (minimize initial load time).
* Since public access is restricted for the S3 bucket, you have to setup a bucket policy which allows the ClouFront distribution to read files from your bucket.
* Continuous deployment can be implemented in a way similar to the above approach.

== Elastic BeanStalk
* Here you can avail load balancing, scaling, health monitoring and various other configurations for your app.
* The most basic configuration here is to specify an environment (NodeJS) for your application to run. Behind the scenes, it creates a S3 bucket for you to upload your files. You can create a continuous deployment to push your files to the S3 bucket.
* Here too you can avail a SSL certificate (from Amazon Certificate Manager) and add a listener to your load balancer to forward incoming requests for your domain to your application.
* The price will depend on the resources you consume (S3, EC2 instances, etc.)

== Elastic Kubernetes Service
* This is the approach if you want to containerize your application. It is useful if your app runs on a specific NodeJs version, or when you application is composed of micro-front-ends.
* You can dockerize your app by basing it off a Node image and then serving the generated build output through NGINX. And you can use Amazon Elastic Container Registry to push your built docker images.
* Besides cluster charges, you only pay for the resources you use (EC2, EBS, etc.).

There are many other services available besides the ones mentioned above, like AWS Amplify, Amazon Lightsail and others. But those are beyond the scope of this guide.